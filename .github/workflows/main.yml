name: EmployeeManagementService CI/CD

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      branch:
        description: 'Git branch to build'
        default: 'main'
      env:
        description: 'Environment to deploy'
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  build-and-deploy:
    runs-on: windows-latest  # matches Docker Desktop paths

    env:
      SERVICES: service-registry,api-gateway,auth-service,user-service,employee-service
      BASE_PATH: 'D:/Workbench/micrservice-working/EmployeeManagementSystem/EmployeeManagementSystem'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Detect changed services
        id: detect
        run: |
          $changed = @()
          $services = $Env:SERVICES.Split(",")
          git fetch --depth=2 origin ${{ github.ref_name }}
          foreach ($svc in $services) {
              if (git diff --name-only HEAD~1 HEAD | Select-String -Pattern "$Env:BASE_PATH/$svc/") {
                  $changed += $svc
              }
          }
          if ($changed.Count -eq 0) {
              $changed = $services
          }
          Write-Host "Services to build: $($changed -join ',')"
          echo "::set-output name=services::${changed -join ','}"

      - name: Build Docker images
        run: |
          $changedServices = "${{ steps.detect.outputs.services }}".Split(",")
          foreach ($svc in $changedServices) {
              Write-Host "Building Docker image for $svc"
              cd "$Env:BASE_PATH\$svc"
              mvn -T 1C clean package -DskipTests jib:dockerBuild -Djib.to.image=$svc:latest
          }

      - name: Trigger ArgoCD sync
        run: |
          $appName = if (${{ github.event.inputs.env }} -eq "prod") { "employee-management-prod" } else { "employee-management-dev" }
          argocd app sync $appName --grpc-web
          Write-Host "Triggered ArgoCD sync for $appName"
